React - отлично подходит для создания современных одностраничных приложений любого размера и масштаба.

https://github.com/facebook/create-react-app

SPA - single page application 
один раз загружает index html (типа пустой) и много приходит js файлов (очень)
потом идёт запрос AJAX запрос на сервак (постоянно принимает запросы)
сервак воз JSON файл

UI - User Interface
UX - User Experience


JSX - это одельный язык, html в js

КОМПОНЕНТА - это ФУНКЦИЯ, возвращяющая разметку (JSX)
const App = (props) => {
  return (
    <div>
      <p>2342asd</p>
    </div>
  );
}
<App/>

import <> from "./<>";
export default <>;

npm i react-router-dom

route - система смотрит какой в адресе путь (URL) если в адресе новый путь то меняет компоненту на другую, старую удаляет
а новую показывает

для <Route path="/lorem" component={lorem} /> нужно указывать внутри <BrowserRouter></BrowserRouter>
или же можно рендерить так: <Route path="/lorem" render={(props) => <Lorem some={props.some} />} />


что бы без перезагрузки старницы использовать <NavLink to="/path"> // просто изменяет URL в браузере

<NavLink to="/path/3"> id это под категория path

atridute={obj.key}

let data = arrData.map((element) => (
  <p>{element.key}</p>
));

ссылка:
let addPost = () => {
	let text = newPostElement.current.value;
	alert(text); };

let newPostElement = React.createRef();
<textarea ref={newPostElement} ></textarea>
<button className="control" onClick={addPost}></button>

// создаём ссылку React.createRef(); // пита getElementById;
// берём значение ванильные даные ввода JS current.value; // current == ссылается на нативный елемет JS

MobX == ООП програмирования
Redux == Функциональное програмирования

Flux == это архитектура

value={props.state}
onChenge={fun}

observer == наблюдатель

dispatch(action) == отправить(объект)

action это объект у него должен быть type
// type: "ADD-POST"
export let addTextActionCreator = (params) => {
  return { type: "ADD-POST" };
};

e.target.value === взять значение инпута или текстрии

// reducer
это читсая фукнция она приним state и action если нужно принимает action применяет к state и возращяет этот state (если action нету тогда просто state) 

// redux

container component === это компонента которая обслуживает нужную компоненту, то есть обертка это компонента в которою приходить грязь (store, dispatch) но в ней есть нужная компонента она читая (preseant component) 

context == глобальная коробка

// context используеться для контейрных компонент

let storeContext = React.createContext(null);

// для передачи контекста
<storeContext.Provider value={store}>
  <App />
</storeContext.Provider>

//для ловли контекста
<storeContext.Consumer>
  {
    () => <Post/>
  }
</storeContext.Consumer>

// react-redux === это context 

let mapStateToProps = (state) => {
  return {
    dialogsPage: state.dialogsPage,
  };
};

const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);